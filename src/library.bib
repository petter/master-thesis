Automatically generated by Mendeley Desktop 1.19.8
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@phdthesis{Stordahl2011,
abstract = {	This master thesis studies the Boo programming language with special emphasis on its facilities for metaprogramming and the ability to extend the language. Boo is an object-oriented programming language, with a syntax similar to Python, and is based on the .NET framework. In particular it has some interesting metaprogramming mechanisms: meta methods, macros and syntactical attributes, which are processed and executed during compilation with access to compiler data structures (the abstract syntax tree). This thesis evaluates these mechanisms, primarily with respect to how well they are suited to implement a type of modularization called Package Templates (PT). This is a mechanism that facilitates reuse of collections of related classes (called templates), which requires that templates are "instantiated" at compile-time before the classes can be used in a program. When templates are instantiated the resulting classes can be adapted for various purposes through renaming, additions, merging, and other means. The thesis describes an implementation, called BooPT, where the Boo metaprogramming mechanisms are used to create a basic variant of PT for Boo, and it concludes that these are both flexible and well fit for this purpose.},
author = {Stordahl, H{\aa}kon},
file = {:C$\backslash$:/Users/Petter/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Stordahl - 2011 - BooPT Implementasjon av Package Templates for Boo.pdf:pdf},
month = {dec},
school = {University of Oslo},
title = {{BooPT: Implementasjon av Package Templates for Boo}},
url = {https://www.duo.uio.no/handle/10852/9025},
year = {2011}
}
@misc{esreserved,
author = {Mozilla},
title = {{Lexical grammar - JavaScript | MDN}},
url = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical{\_}grammar{\#}Keywords https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Lexical{\_}grammar},
urldate = {2020-10-12}
}
@misc{tree-sitter,
author = {Brunsfeld, Max},
title = {{Tree-sitter}},
url = {https://tree-sitter.github.io/tree-sitter/},
urldate = {2021-02-19}
}
@inproceedings{malayeri,
author = {Malayeri, Donna and Aldrich, Jonathan},
booktitle = {Programming Languages and Systems, 18th European Symposium on Programming, {\{}ESOP{\}} 2009, Held as Part of the Joint European Conferences on Theory and Practice of Software, {\{}ETAPS{\}} 2009, York, UK, March 22-29, 2009. Proceedings},
doi = {10.1007/978-3-642-00590-9_8},
file = {:C$\backslash$:/Users/Petter/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Malayeri, Aldrich - 2009 - Is Structural Subtyping Useful An Empirical Study.pdf:pdf},
pages = {95--111},
title = {{Is Structural Subtyping Useful? An Empirical Study}},
url = {https://doi.org/10.1007/978-3-642-00590-9{\_}8},
year = {2009}
}
@inproceedings{cook:subtyping,
author = {Cook, William R and Hill, Walter L and Canning, Peter S},
booktitle = {Conference Record of the Seventeenth Annual {\{}ACM{\}} Symposium on Principles of Programming Languages, San Francisco, California, USA, January 1990},
doi = {10.1145/96709.96721},
pages = {125--135},
title = {{Inheritance Is Not Subtyping}},
url = {https://doi.org/10.1145/96709.96721},
year = {1990}
}
@inproceedings{Cunningham2008,
abstract = {Using a problem domain motivated by Bentley's "Little Languages" column [1], this paper explores the use of the Ruby programming language's flexible syntax, dynamic nature, and reflexive metaprogramming facilities to implement an internal domain-specific language (DSL) for surveys. Copyright 2008 ACM.},
author = {Cunningham, H Conrad},
booktitle = {Proceedings of the 46th Annual Southeast Regional Conference on XX, ACM-SE 46},
doi = {10.1145/1593105.1593181},
file = {:C$\backslash$:/Users/Petter/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Cunningham - 2008 - A Little Language for Surveys Constructing an Internal DSL in Ruby.pdf:pdf},
isbn = {9781605581057},
keywords = {Domain specific language,Reflexive metaprogramming,Ruby},
pages = {282--287},
title = {{A little language for surveys: Constructing an internal DSL in Ruby}},
year = {2008}
}
@misc{tsnodegithub,
author = {TypeStrong},
title = {ts-node},
url = {https://github.com/TypeStrong/ts-node}
}
@misc{webpack,
author = {Webpack},
title = {webpack},
url = {https://github.com/webpack/webpack}
}
@misc{prototypechaining,
title = {{Inheritance and the prototype chain - JavaScript | MDN}},
url = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance{\_}and{\_}the{\_}prototype{\_}chain},
urldate = {2021-05-01}
}
@misc{sexprs,
title = {{S-expression - Wikipedia}},
url = {https://en.wikipedia.org/wiki/S-expression},
urldate = {2021-01-25}
}
@techreport{Hudak1997,
author = {Hudak, Paul},
file = {:C$\backslash$:/Users/Petter/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Hudak - 1997 - Domain Specific Languages(2).pdf:pdf},
institution = {Yale University, Department of Computer Science},
title = {{Domain Specific Languages *}},
year = {1997}
}
@misc{Ho,
author = {Ho, Long},
title = {{Writing TypeScript custom AST Transformer (Part 1) | by Long Ho | Level Up Coding}},
url = {https://levelup.gitconnected.com/writing-typescript-custom-ast-transformer-part-1-7585d6916819},
urldate = {2020-10-05}
}
@article{cpp,
author = {Stroustrup, Bjarne},
journal = {Computing Systems},
number = {4},
pages = {367--395},
title = {{Multiple Inheritance for {\{}C++{\}}}},
url = {http://www.usenix.org/publications/compsystems/1989/fall{\_}stroustrup.pdf},
volume = {2},
year = {1989}
}
@misc{whatisjs,
author = {Mozilla},
title = {{What is JavaScript? - Learn web development | MDN}},
url = {https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First{\_}steps/What{\_}is{\_}JavaScript https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First{\_}steps/What{\_}is{\_}JavaScript{\#}A{\_}high-level{\_}definition{\%}0Ahttps://developer.mozilla.org/en-US/docs/Learn/Java},
year = {2019}
}
@techreport{Isene2018,
author = {Isene, Eirik},
file = {:C$\backslash$:/Users/Petter/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Isene - 2018 - PT{\#}-Package Templates in C{\#} Extending the Roslyn Full-Scale Production Compiler with New Language Features.pdf:pdf},
title = {{PT{\#}-Package Templates in C{\#} Extending the Roslyn Full-Scale Production Compiler with New Language Features}},
year = {2018}
}
@misc{jswikipedia,
author = {Wikipedia},
title = {{JavaScript - Wikipedia}},
url = {https://en.wikipedia.org/wiki/JavaScript},
urldate = {2021-03-09}
}
@misc{with-statement,
author = {{MDN Web Docs}},
title = {{with - JavaScript}},
url = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with},
urldate = {2021-02-24}
}
@misc{tswebsite,
abstract = {TypeScript extends JavaScript by adding types to the language. TypeScript speeds up your development experience by catching errors and providing fixes before you even run your code.},
author = {TypeScript},
booktitle = {TypeScript},
title = {{Typed JavaScript at Any Scale}},
url = {https://www.typescriptlang.org/},
urldate = {2021-03-09},
year = {2020}
}
@inproceedings{10.1007/978-3-662-44202-9_11,
abstract = {TypeScript is an extension of JavaScript intended to enable easier development of large-scale JavaScript applications. While every JavaScript program is a TypeScript program, TypeScript offers a module system, classes, interfaces, and a rich gradual type system. The intention is that TypeScript provides a smooth transition for JavaScript programmers---well-established JavaScript programming idioms are supported without any major rewriting or annotations. One interesting consequence is that the TypeScript type system is not statically sound by design. The goal of this paper is to capture the essence of TypeScript by giving a precise definition of this type system on a core set of constructs of the language. Our main contribution, beyond the familiar advantages of a robust, mathematical formalization, is a refactoring into a safe inner fragment and an additional layer of unsafe rules.},
address = {Berlin, Heidelberg},
author = {Bierman, Gavin and Abadi, Mart{\'{i}}n and Torgersen, Mads},
booktitle = {ECOOP 2014 -- Object-Oriented Programming},
editor = {Jones, Richard},
isbn = {978-3-662-44202-9},
pages = {257--281},
publisher = {Springer Berlin Heidelberg},
title = {{Understanding TypeScript}},
year = {2014}
}
@article{jigsaw,
abstract = {Mixins},
author = {Bracha, Gilad},
file = {:C$\backslash$:/Users/Petter/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Van Rosendale - 1995 - The Programming Language Jigsaw Mixins, Modularity And Multiple Inheritance.pdf:pdf},
journal = {Modularity, and Multiple In},
number = {March},
title = {{The programming language jigsaw: mixins, modularity and multiple inheritance}},
url = {https://www.researchgate.net/publication/2739177 http://scholar.google.com/scholar?hl=en{\&}btnG=Search{\&}q=intitle:THE+PROGRAMMING+LANGUAGE+JIGSAW{\#}9{\%}5Cnhttp://content.lib.utah.edu/utils/getfile/collection/uspace/id/4356/filename/4228.pdf},
year = {1992}
}
@book{tapl,
abstract = {A type system is a syntactic method for automatically checking the absence of certain erroneous behaviors by classifying program phrases according to the kinds of values they compute. The study of type systems-and of programming languages from a type-theoretic perspective-has important applications in software engineering, language design, high-performance compilers, and security.{\textless}br {\textless}br This text provides a comprehensive introduction both to type systems in computer science and to the basic theory of programming languages. The approach is pragmatic and operational; each new concept is motivated by programming examples and the more theoretical sections are driven by the needs of implementations. Each chapter is accompanied by numerous exercises and solutions, as well as a running implementation, available via the Web. Dependencies between chapters are explicitly identified, allowing readers to choose a variety of paths through the material.{\textless}br {\textless}br The core topics include the untyped lambda-calculus, simple type systems, type reconstruction, universal and existential polymorphism, subtyping, bounded quantification, recursive types, kinds, and type operators. Extended case studies develop a variety of approaches to modeling the features of object-oriented languages.},
author = {Pierce, Benjamin C},
isbn = {9780262162098},
publisher = {MIT Press},
title = {{Types and Programming Languages}},
year = {2002}
}
@phdthesis{compilingpt,
author = {Andersen, Kenneth Solb{\o}},
title = {{Compiling Package Templates}},
url = {http://urn.nb.no/URN:NBN:no-39058},
year = {2013}
}
@techreport{Madsen,
abstract = {The notions of class, subclass and virtual procedure are fairly well understood and recognized as some of the key concepts in object-oriented programming. The possibility of modifying a virtual procedure in a subclass is a powerful technique for specializing the general properties of the superclass. In most object-oriented languages, the attributes of an object may be references to objects and (virtual) procedures. In Simula and BETA it is also possible to have class attributes. The power of class attributes has not yet been widely recognized. In BETA a class may also have virtual class attributes. This makes it possible to defer part of the specification of a class attribute to a subclass. In this sense virtual classes are analogous to virtual procedures. Virtual classes are mainly interesting within strongly typed languages where they provide a mechanism for defining general parameterized classes such as set, vector and list. In this sense they provide an alternative to generics. Although the notion of virtual class originates from BETA, it is presented as a general language mechanism.},
author = {Madsen, Ole Lehrmann},
file = {:C$\backslash$:/Users/Petter/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Madsen - Unknown - Virtual Classes A powerful mechanism in object-oriented programming.pdf:pdf},
keywords = {BETA,C++,Eiffel,Simula,Smalltalk,generics,languages,parameterized class,strong typing,virtual class,virtual procedure},
title = {{Virtual Classes A powerful mechanism in object-oriented programming}}
}
@article{jot,
abstract = {It has been recognized that there is a need for a language mechanism that support reuse of collections of related classes. Existing approaches either use an enclosing class for this purpose, or introduce a special purpose, new language construct. In this paper we explore the use of packages for the grouping of related classes. Ordinary packages are already grouping of classes, so we explore the combination of packages and templates, i.e. package templates. By instantiating package templates, the classes of the package templates are provided as if ordinary packages are produced and imported. {\textcopyright} JOT, 2009.},
author = {Krogdahl, Stein and M{\o}ller-Pedersen, Birger and S{\o}rensen, Fredrik},
doi = {10.5381/jot.2009.8.7.a1},
file = {:C$\backslash$:/Users/Petter/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Krogdahl, M{\o}ller-Pedersen, S{\o}rensen - 2009 - Exploring the use of package templates for flexible re-use of collections of related classe.pdf:pdf},
issn = {16601769},
journal = {Journal of Object Technology},
number = {7},
pages = {59--85},
publisher = {Journal of Object Technology},
title = {{Exploring the use of package templates for flexible re-use of collections of related classes}},
volume = {8},
year = {2009}
}
@misc{bison,
author = {{Free Software Foundation}},
title = {{Bison 3.7.1}},
url = {https://www.gnu.org/software/bison/manual/bison.html},
urldate = {2021-02-24}
}
@misc{doexpr,
title = {{tc39/proposal-do-expressions: Proposal for `do` expressions}},
url = {https://github.com/tc39/proposal-do-expressions},
urldate = {2020-10-29}
}
@misc{tscplugin,
author = {Microsoft},
booktitle = {GitHub},
title = {{microsoft/TypeScript}},
url = {https://github.com/microsoft/TypeScript/wiki/Writing-a-Language-Service-Plugin}
}
@misc{nodenativeaddons,
author = {Node},
title = {{C++ Addons | Node.js v11.3.0 Documentation}},
url = {https://nodejs.org/api/addons.html},
urldate = {2021-03-04}
}
@techreport{tsspec,
author = {{Microsoft Corporation}},
month = {oct},
title = {{Typescript Language Specification Version 1.8}},
url = {https://web.archive.org/web/20200808173225if{\_}/https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md},
year = {2012}
}
@misc{Microsoft,
author = {Microsoft},
title = {{Using the Compiler API {\textperiodcentered} microsoft/TypeScript Wiki}},
url = {https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API},
urldate = {2020-10-05}
}
@inproceedings{requiredtypes,
author = {Axelsen, Eyvind W and Krogdahl, Stein},
booktitle = {Proceedings of the 11th International Conference on Aspect-oriented Software Development, {\{}AOSD{\}} 2012, Potsdam, Germany, March 25-30, 2012},
doi = {10.1145/2162049.2162060},
editor = {Hirschfeld, Robert and Tanter, {\'{E}}ric and Sullivan, Kevin J and Gabriel, Richard P},
isbn = {978-1-4503-1092-5},
pages = {83--94},
publisher = {ACM},
title = {{Adaptable generic programming with required type specifications and package templates}},
url = {https://doi.org/10.1145/2162049.2162060},
year = {2012}
}
@misc{tsloadergithub,
author = {TypeStrong},
title = {ts-loader},
url = {https://github.com/TypeStrong/ts-loader}
}
@techreport{estreespec,
author = {{Mozilla Contributors} and {ESTree Contributors}},
title = {{The ESTree Spec}},
url = {https://github.com/estree/estree}
}
@inproceedings{Axelsen2012,
abstract = {Package Templates (PT) is a mechanism designed for writing reusable modules, called templates, each consisting of a set of classes that can be adapted to their use in a program through compile-time specialization. A template must be instantiated in a program before its classes can be used. The mechanism supports type-safe renaming, merging, type parameterization and refinement in the form of static additions and overrides that are orthogonal to the corresponding concepts of ordinary inheritance. In this paper, we consider PT as an extension to Java, and a PT program will then consist of a number of Java packages and templates, where templates are instantiated in packages or other templates. Our aim and main contribution is to define the meaning of such a program, and to show that this definition is consistent. We first show this for a core subset of PT, C-PT, and define a set of source-to-source transformations for converting C-PT programs to plain Java programs using semantics we have described informally in previous papers. We can then define the meaning of a C-PT program in terms of the resulting Java program. Thus, we have to verify that the transformations will always convert a legal C-PT program to a legal Java program. Finally, we briefly discuss how this approach can be extended to full PT. A main challenge is to preserve externally visible names (for classes, methods and fields), and at the same time prevent unwanted subsequent rebindings caused e.g. by overload resolution in the Java compiler. Names that are bound to declarations in a template should not be rebound to different declarations by subsequent compositions or adaptions. In addition to defining the runtime semantics of PT constructs in terms of their translation to Java, the transformation rules can also be seen as a high-level approach to how a compiler for this language might be implemented. Copyright 2012 ACM.},
address = {New York, New York, USA},
author = {Axelsen, Eyvind W. and Krogdahl, Stein},
booktitle = {Proceedings of the 11th International Conference on Generative Programming and Component Engineering, GPCE'12},
doi = {10.1145/2371401.2371409},
file = {:C$\backslash$:/Users/Petter/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Axelsen, Krogdahl - 2012 - Package templates A definition by semantics-preserving source-to-source transformations to efficient java cod.pdf:pdf},
isbn = {9781450311298},
issn = {1523-2867},
keywords = {Java,Templates,Transformations},
pages = {50--59},
publisher = {ACM Press},
title = {{Package templates: A definition by semantics-preserving source-to-source transformations to efficient java code}},
url = {http://dl.acm.org/citation.cfm?doid=2371401.2371409},
year = {2012}
}
@inproceedings{Bierman2014,
abstract = {TypeScript is an extension of JavaScript intended to enable easier development of large-scale JavaScript applications. While every JavaScript program is a TypeScript program, TypeScript offers a module system, classes, interfaces, and a rich gradual type system. The intention is that TypeScript provides a smooth transition for JavaScript programmers-well-established JavaScript programming idioms are supported without any major rewriting or annotations. One interesting consequence is that the TypeScript type system is not statically sound by design. The goal of this paper is to capture the essence of TypeScript by giving a precise definition of this type system on a core set of constructs of the language. Our main contribution, beyond the familiar advantages of a robust, mathematical formalization, is a refactoring into a safe inner fragment and an additional layer of unsafe rules. {\textcopyright} 2014 Springer-Verlag.},
author = {Bierman, Gavin and Abadi, Mart{\'{i}}n and Torgersen, Mads},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-662-44202-9_11},
file = {:C$\backslash$:/Users/Petter/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Bierman, Abadi, Torgersen - 2014 - Understanding TypeScript.pdf:pdf},
isbn = {9783662442012},
issn = {16113349},
pages = {257--281},
publisher = {Springer Verlag},
title = {{Understanding TypeScript}},
url = {http://blogs.msdn.com/b/typescript/},
volume = {8586 LNCS},
year = {2014}
}
@inproceedings{DBLP:journals/taosd/2012-9,
doi = {10.1007/978-3-642-35551-6},
editor = {Leavens, Gary T and Chiba, Shigeru and Haupt, Michael and Ostermann, Klaus and Wohlstadter, Eric},
isbn = {978-3-642-35550-9},
publisher = {Springer},
series = {Lecture Notes in Computer Science},
title = {{Transactions on Aspect-Oriented Software Development {\{}IX{\}}}},
url = {https://doi.org/10.1007/978-3-642-35551-6},
volume = {7271},
year = {2012}
}
@inproceedings{DBLP:conf/aosd/2012,
editor = {Hirschfeld, Robert and Tanter, {\'{E}}ric and Sullivan, Kevin J and Gabriel, Richard P},
isbn = {978-1-4503-1092-5},
publisher = {ACM},
title = {{Proceedings of the 11th International Conference on Aspect-oriented Software Development, {\{}AOSD{\}} 2012, Potsdam, Germany, March 25-30, 2012}},
url = {http://dl.acm.org/citation.cfm?id=2162049},
year = {2012}
}
@article{java-unsound,
abstract = {We present short programs that demonstrate the unsound- ness of Java and Scala's current type systems. In partic- ular, these programs provide parametrically polymorphic functions that can turn any type into any type without (down)casting. Fortunately, parametric polymorphism was not integrated into the Java Virtual Machine (JVM), so these examples do not demonstrate any unsoundness of the JVM. Nonetheless, we discuss broader implications of these find- ings on the field of programming languages.},
author = {Amin, Nada and Tate, Ross},
doi = {10.1145/3022671.2984004},
file = {:C$\backslash$:/Users/Petter/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Amin, Tate - 2016 - Java and scala's type systems are unsound the existential crisis of null pointers.pdf:pdf},
issn = {0362-1340},
journal = {ACM SIGPLAN Notices},
keywords = {D32 [Programming Languages]: Language Classificati,Existential,Java,Languages,Null,Reliability,Scala,Security Keywords Unsoundness},
month = {dec},
number = {10},
pages = {838--848},
publisher = {Association for Computing Machinery (ACM)},
title = {{Java and scala's type systems are unsound: the existential crisis of null pointers}},
url = {https://dl.acm.org/doi/10.1145/3022671.2984004},
volume = {51},
year = {2016}
}
@misc{babelhandbook,
author = {Kyle, Jamie},
title = {{Babel Plugin Handbook}},
url = {https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md}
}
@misc{awesometypescriptloadergithub,
author = {Panferov, Stanislav},
title = {{Awesome TypeScript Loader}},
url = {https://github.com/s-panferov/awesome-typescript-loader}
}
@article{krogdahl:GP,
author = {Krogdahl, Stein},
institution = {University of Oslo, Department of Informatics},
title = {{Generic Packages and Expandable Classes}},
year = {2001}
}
@misc{Terence2012,
abstract = {Programmers run into parsing problems all the time. Whether it's a data format like JSON, a network protocol like SMTP, a server configuration file for Apache, a PostScript/PDF file, or a simple spreadsheet macro language--ANTLR v4 and this book will demystify the process. ANTLR v4 has been rewritten from scratch to make it easier than ever to build parsers and the language applications built on top. This completely rewritten new edition of the bestselling Definitive ANTLR Reference shows you how to take advantage of these new features.},
address = {Dallas, Texas},
author = {Parr, Terence (Terence John)},
edition = {2nd editio},
isbn = {1-941222-62-5},
keywords = {Parsing (Computer grammar),Parsing (Computer grammar); Programming languages,Programming languages},
publisher = {The Pragmatic Bookself},
title = {{The definitive ANTLR 4 reference}},
year = {2012}
}
@misc{arrowfunction,
keywords = {arrowfunctionexpr},
title = {{Arrow function expressions - JavaScript | MDN}},
url = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow{\_}functions},
urldate = {2020-10-19}
}
@misc{declerationmerging,
title = {{TypeScript: Handbook - Declaration Merging}},
url = {https://www.typescriptlang.org/docs/handbook/declaration-merging.html},
urldate = {2020-10-28}
}
@misc{ttypescriptgithub,
author = {Cevek},
title = {ttypescript},
url = {https://github.com/cevek/ttypescript}
}
@misc{lexicalgrammars,
title = {{Lexical grammar - JavaScript | MDN}},
url = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical{\_}grammar},
urldate = {2020-10-14}
}
@article{tsuper,
author = {Axelsen, Eyvind W and S{\o}rensen, Fredrik and Krogdahl, Stein and M{\o}ller-Pedersen, Birger},
doi = {10.1007/978-3-642-35551-6_7},
editor = {Leavens, Gary T and Chiba, Shigeru and Haupt, Michael and Ostermann, Klaus and Wohlstadter, Eric},
isbn = {978-3-642-35550-9},
journal = {{\{}LNCS{\}} Trans. Aspect Oriented Softw. Dev.},
pages = {268--305},
publisher = {Springer},
series = {Lecture Notes in Computer Science},
title = {{Challenges in the Design of the Package Template Mechanism}},
url = {https://doi.org/10.1007/978-3-642-35551-6{\_}7},
volume = {9},
year = {2012}
}
@article{groovypt,
abstract = {We show how package templates, a modularization mechanism originally developed for statically typed languages like Java and C {\#} , can be applied to and implemented in a dynamic language like Groovy, by using the language's capabilities for meta-programming. We then consider a set of examples and discuss dynamic PT from the viewpoints of code modularization and reuse, and dynamic adaption of classes at runtime.},
author = {Axelsen, Eyvind W. and Krogdahl, Stein},
doi = {10.1145/1837513.1640139},
issn = {0362-1340},
journal = {ACM SIGPLAN Notices},
keywords = {D3 [Software]: Pro-gramming Languages,D33 [Programming Languages]: Lan-guage Constructs,D33 [Programming Languages]: Language Constructs a},
month = {dec},
number = {12},
pages = {15--26},
publisher = {Association for Computing Machinery (ACM)},
title = {{Groovy package templates: supporting reuse and runtime adaption of class hierarchies}},
url = {https://dl.acm.org/doi/10.1145/1837513.1640139},
volume = {44},
year = {2009}
}
@misc{babelparserdocs,
author = {Babel},
title = {@babel/parser},
url = {https://babeljs.io/docs/en/babel-parser}
}
@misc{deleteop,
title = {{delete operator - JavaScript | MDN}},
url = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete},
urldate = {2020-10-29}
}
@phdthesis{Axelsen2013,
author = {Axelsen, Eyvind W},
file = {:C$\backslash$:/Users/Petter/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Axelsen - 2013 - Package Templates Design, Experimentation and Implementation Evolving a Mechanism for Reuse and Adaption of Class Colle.pdf:pdf},
title = {{Package Templates: Design, Experimentation and Implementation Evolving a Mechanism for Reuse and Adaption of Class Collections}},
year = {2013}
}
@misc{mixinjs,
title = {mixin-js - npm},
url = {https://www.npmjs.com/package/mixin-js},
urldate = {2020-10-29}
}
@article{Power2000,
abstract = {In this paper, we present an object-oriented model of symbol table construction and name lookup for ISO C++ using the Unified Modeling Language (UML). Our use of UML class, activity and sequence diagrams serves to explicate our model and our use of patterns such as decorator and facade increase the understandability of the model. Clause three of the ISO C++ standard describes the procedures and rules for performing name lookup; our activity and sequence diagrams serve to simulate these procedures in graphical fashion. An advantage of our approach is that our model can increase C++ understandability for those practitioners with a working UML knowledge. An important contribution of our work is that our model forms the basis for construction of a parser front-end for ISO C++. Our explication of the name lookup problem represents a necessary first step in this construction and our component approach is independent of the compiler technology utilized. Our use of the UML in describing parser-driven applications demonstrates how front-end development can be integrated into an object-oriented framework. Construction of an ISO C++ front-end will help to increase the collection of tools for applications that use this popular language.},
author = {Power, James F. and Malloy, Brian A.},
doi = {10.1109/tools.2000.891358},
issn = {15302067},
journal = {Proceedings of the Conference on Technology of Object-Oriented Languages and Systems, TOOLS},
number = {TOOLS-PACIFIC2000},
pages = {57--68},
title = {{Symbol table construction and name lookup in ISO C++}},
url = {https://ieeexplore.ieee.org/stamp/stamp.jsp?tp={\&}arnumber=891358},
year = {2000}
}
