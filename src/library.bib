Automatically generated by Mendeley Desktop 1.19.4
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@misc{lexicalgrammars,
title = {{Lexical grammar - JavaScript | MDN}},
url = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical{\_}grammar},
urldate = {2020-10-14}
}
@techreport{Axelsen2013,
author = {Axelsen, Eyvind W},
file = {:home/petter/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Axelsen - 2013 - Package Templates Design, Experimentation and Implementation Evolving a Mechanism for Reuse and Adaption of Class Colle.pdf:pdf},
title = {{Package Templates: Design, Experimentation and Implementation Evolving a Mechanism for Reuse and Adaption of Class Collections}},
year = {2013}
}
@article{krogdahl:GP,
author = {Krogdahl, Stein},
institution = {University of Oslo, Department of Informatics},
title = {{Generic Packages and Expandable Classes}},
year = {2001}
}
@online{ttypescriptgithub,
author = {Cevek},
title = {ttypescript},
url = {https://github.com/cevek/ttypescript}
}
@article{groovypt,
abstract = {We show how package templates, a modularization mechanism originally developed for statically typed languages like Java and C {\#} , can be applied to and implemented in a dynamic language like Groovy, by using the language's capabilities for meta-programming. We then consider a set of examples and discuss dynamic PT from the viewpoints of code modularization and reuse, and dynamic adaption of classes at runtime.},
author = {Axelsen, Eyvind W. and Krogdahl, Stein},
doi = {10.1145/1837513.1640139},
issn = {0362-1340},
journal = {ACM SIGPLAN Not.},
keywords = {D3 [Software]: Pro-gramming Languages,D33 [Programming Languages]: Lan-guage Constructs,D33 [Programming Languages]: Language Constructs a},
month = {dec},
number = {12},
pages = {15--26},
publisher = {Association for Computing Machinery (ACM)},
title = {{Groovy package templates: supporting reuse and runtime adaption of class hierarchies}},
url = {https://dl.acm.org/doi/10.1145/1837513.1640139},
volume = {44},
year = {2009}
}
@article{cpp,
author = {Stroustrup, Bjarne},
journal = {Comput. Syst.},
number = {4},
pages = {367--395},
title = {{Multiple Inheritance for {\{}C++{\}}}},
url = {http://www.usenix.org/publications/compsystems/1989/fall{\_}stroustrup.pdf},
volume = {2},
year = {1989}
}
@misc{Microsoft,
author = {Microsoft},
title = {{Using the Compiler API {\textperiodcentered} microsoft/TypeScript Wiki}},
url = {https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API},
urldate = {2020-10-05}
}
@inproceedings{10.1007/978-3-662-44202-9_11,
abstract = {TypeScript is an extension of JavaScript intended to enable easier development of large-scale JavaScript applications. While every JavaScript program is a TypeScript program, TypeScript offers a module system, classes, interfaces, and a rich gradual type system. The intention is that TypeScript provides a smooth transition for JavaScript programmers---well-established JavaScript programming idioms are supported without any major rewriting or annotations. One interesting consequence is that the TypeScript type system is not statically sound by design. The goal of this paper is to capture the essence of TypeScript by giving a precise definition of this type system on a core set of constructs of the language. Our main contribution, beyond the familiar advantages of a robust, mathematical formalization, is a refactoring into a safe inner fragment and an additional layer of unsafe rules.},
address = {Berlin, Heidelberg},
author = {Bierman, Gavin and Abadi, Mart{\'{i}}n and Torgersen, Mads},
booktitle = {ECOOP 2014 -- Object-Oriented Program.},
editor = {Jones, Richard},
isbn = {978-3-662-44202-9},
pages = {257--281},
publisher = {Springer Berlin Heidelberg},
title = {{Understanding TypeScript}},
year = {2014}
}
@misc{Ho,
author = {Ho, Long},
title = {{Writing TypeScript custom AST Transformer (Part 1) | by Long Ho | Level Up Coding}},
url = {https://levelup.gitconnected.com/writing-typescript-custom-ast-transformer-part-1-7585d6916819},
urldate = {2020-10-05}
}
@inproceedings{Bierman2014,
abstract = {TypeScript is an extension of JavaScript intended to enable easier development of large-scale JavaScript applications. While every JavaScript program is a TypeScript program, TypeScript offers a module system, classes, interfaces, and a rich gradual type system. The intention is that TypeScript provides a smooth transition for JavaScript programmers-well-established JavaScript programming idioms are supported without any major rewriting or annotations. One interesting consequence is that the TypeScript type system is not statically sound by design. The goal of this paper is to capture the essence of TypeScript by giving a precise definition of this type system on a core set of constructs of the language. Our main contribution, beyond the familiar advantages of a robust, mathematical formalization, is a refactoring into a safe inner fragment and an additional layer of unsafe rules. {\textcopyright} 2014 Springer-Verlag.},
author = {Bierman, Gavin and Abadi, Mart{\'{i}}n and Torgersen, Mads},
booktitle = {Lect. Notes Comput. Sci. (including Subser. Lect. Notes Artif. Intell. Lect. Notes Bioinformatics)},
doi = {10.1007/978-3-662-44202-9_11},
file = {:home/petter/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Bierman, Abadi, Torgersen - 2014 - Understanding TypeScript.pdf:pdf},
isbn = {9783662442012},
issn = {16113349},
pages = {257--281},
publisher = {Springer Verlag},
title = {{Understanding TypeScript}},
url = {http://blogs.msdn.com/b/typescript/},
volume = {8586 LNCS},
year = {2014}
}
@misc{arrowfunction,
keywords = {arrowfunctionexpr},
title = {{Arrow function expressions - JavaScript | MDN}},
url = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow{\_}functions},
urldate = {2020-10-19}
}
@misc{esreserved,
author = {Mozilla},
title = {{Lexical grammar - JavaScript | MDN}},
url = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical{\_}grammar{\#}Keywords https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Lexical{\_}grammar},
urldate = {2020-10-12}
}
@manual{babelparserdocs,
author = {Babel},
title = {@babel/parser},
url = {https://babeljs.io/docs/en/babel-parser}
}
@online{tsnodegithub,
author = {TypeStrong},
title = {ts-node},
url = {https://github.com/TypeStrong/ts-node}
}
@inproceedings{requiredtypes,
author = {Axelsen, Eyvind W and Krogdahl, Stein},
booktitle = {Proc. 11th Int. Conf. Asp. Softw. Dev. {\{}AOSD{\}} 2012, Potsdam, Ger. March 25-30, 2012},
doi = {10.1145/2162049.2162060},
editor = {Hirschfeld, Robert and Tanter, {\'{E}}ric and Sullivan, Kevin J and Gabriel, Richard P},
isbn = {978-1-4503-1092-5},
pages = {83--94},
publisher = {ACM},
title = {{Adaptable generic programming with required type specifications and package templates}},
url = {https://doi.org/10.1145/2162049.2162060},
year = {2012}
}
@mastersthesis{compilingpt,
author = {Andersen, Kenneth Solb{\o}},
title = {{Compiling Package Templates}},
url = {http://urn.nb.no/URN:NBN:no-39058},
year = {2013}
}
@proceedings{DBLP:journals/taosd/2012-9,
doi = {10.1007/978-3-642-35551-6},
editor = {Leavens, Gary T and Chiba, Shigeru and Haupt, Michael and Ostermann, Klaus and Wohlstadter, Eric},
isbn = {978-3-642-35550-9},
publisher = {Springer},
series = {Lecture Notes in Computer Science},
title = {{Transactions on Aspect-Oriented Software Development {\{}IX{\}}}},
url = {https://doi.org/10.1007/978-3-642-35551-6},
volume = {7271},
year = {2012}
}
@online{awesometypescriptloadergithub,
author = {Panferov, Stanislav},
title = {{Awesome TypeScript Loader}},
url = {https://github.com/s-panferov/awesome-typescript-loader}
}
@techreport{Isene2018,
author = {Isene, Eirik},
file = {:home/petter/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Isene - 2018 - PT{\#}-Package Templates in C{\#} Extending the Roslyn Full-Scale Production Compiler with New Language Features.pdf:pdf},
title = {{PT{\#}-Package Templates in C{\#} Extending the Roslyn Full-Scale Production Compiler with New Language Features}},
year = {2018}
}
@article{Krogdahl2009,
abstract = {It has been recognized that there is a need for a language mechanism that support reuse of collections of related classes. Existing approaches either use an enclosing class for this purpose, or introduce a special purpose, new language construct. In this paper we explore the use of packages for the grouping of related classes. Ordinary packages are already grouping of classes, so we explore the combination of packages and templates, i.e. package templates. By instantiating package templates, the classes of the package templates are provided as if ordinary packages are produced and imported. {\textcopyright} JOT, 2009.},
author = {Krogdahl, Stein and M{\o}ller-Pedersen, Birger and S{\o}rensen, Fredrik},
doi = {10.5381/jot.2009.8.7.a1},
issn = {16601769},
journal = {J. Object Technol.},
number = {7},
pages = {59--85},
publisher = {Journal of Object Technology},
title = {{Exploring the use of package templates for flexible re-use of collections of related classes}},
volume = {8},
year = {2009}
}
@misc{declerationmerging,
title = {{TypeScript: Handbook - Declaration Merging}},
url = {https://www.typescriptlang.org/docs/handbook/declaration-merging.html},
urldate = {2020-10-28}
}
@article{tsuper,
author = {Axelsen, Eyvind W and S{\o}rensen, Fredrik and Krogdahl, Stein and M{\o}ller-Pedersen, Birger},
doi = {10.1007/978-3-642-35551-6_7},
editor = {Leavens, Gary T and Chiba, Shigeru and Haupt, Michael and Ostermann, Klaus and Wohlstadter, Eric},
isbn = {978-3-642-35550-9},
journal = {{\{}LNCS{\}} Trans. Asp. Oriented Softw. Dev.},
pages = {268--305},
publisher = {Springer},
series = {Lecture Notes in Computer Science},
title = {{Challenges in the Design of the Package Template Mechanism}},
url = {https://doi.org/10.1007/978-3-642-35551-6{\_}7},
volume = {9},
year = {2012}
}
@inproceedings{malayeri,
author = {Malayeri, Donna and Aldrich, Jonathan},
booktitle = {Program. Lang. Syst. 18th Eur. Symp. Program. {\{}ESOP{\}} 2009, Held as Part Jt. Eur. Conf. Theory Pract. Software, {\{}ETAPS{\}} 2009, York, UK, March 22-29, 2009. Proc.},
doi = {10.1007/978-3-642-00590-9_8},
pages = {95--111},
title = {{Is Structural Subtyping Useful? An Empirical Study}},
url = {https://doi.org/10.1007/978-3-642-00590-9{\_}8},
year = {2009}
}
@misc{tscplugin,
author = {Microsoft},
booktitle = {GitHub},
title = {{microsoft/TypeScript}},
url = {https://github.com/microsoft/TypeScript/wiki/Writing-a-Language-Service-Plugin}
}
@booklet{babelhandbook,
author = {Kyle, Jamie},
title = {{Babel Plugin Handbook}},
url = {https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md}
}
@online{webpack,
author = {Webpack},
title = {webpack},
url = {https://github.com/webpack/webpack}
}
@proceedings{DBLP:conf/aosd/2012,
editor = {Hirschfeld, Robert and Tanter, {\'{E}}ric and Sullivan, Kevin J and Gabriel, Richard P},
isbn = {978-1-4503-1092-5},
publisher = {ACM},
title = {{Proceedings of the 11th International Conference on Aspect-oriented Software Development, {\{}AOSD{\}} 2012, Potsdam, Germany, March 25-30, 2012}},
url = {http://dl.acm.org/citation.cfm?id=2162049},
year = {2012}
}
@inproceedings{cook:subtyping,
author = {Cook, William R and Hill, Walter L and Canning, Peter S},
booktitle = {Conf. Rec. Seventeenth Annu. {\{}ACM{\}} Symp. Princ. Program. Lang. San Fr. California, USA, January 1990},
doi = {10.1145/96709.96721},
pages = {125--135},
title = {{Inheritance Is Not Subtyping}},
url = {https://doi.org/10.1145/96709.96721},
year = {1990}
}
@online{tsloadergithub,
author = {TypeStrong},
title = {ts-loader},
url = {https://github.com/TypeStrong/ts-loader}
}
@techreport{Madsen,
abstract = {The notions of class, subclass and virtual procedure are fairly well understood and recognized as some of the key concepts in object-oriented programming. The possibility of modifying a virtual procedure in a subclass is a powerful technique for specializing the general properties of the superclass. In most object-oriented languages, the attributes of an object may be references to objects and (virtual) procedures. In Simula and BETA it is also possible to have class attributes. The power of class attributes has not yet been widely recognized. In BETA a class may also have virtual class attributes. This makes it possible to defer part of the specification of a class attribute to a subclass. In this sense virtual classes are analogous to virtual procedures. Virtual classes are mainly interesting within strongly typed languages where they provide a mechanism for defining general parameterized classes such as set, vector and list. In this sense they provide an alternative to generics. Although the notion of virtual class originates from BETA, it is presented as a general language mechanism.},
author = {Madsen, Ole Lehrmann},
file = {:home/petter/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Madsen - Unknown - Virtual Classes A powerful mechanism in object-oriented programming.pdf:pdf},
keywords = {BETA,C++,Eiffel,Simula,Smalltalk,generics,languages,parameterized class,strong typing,virtual class,virtual procedure},
title = {{Virtual Classes A powerful mechanism in object-oriented programming}}
}
